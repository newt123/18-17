#
# Jamfile to build Jam (a make(1)-like program)
#

#
# We have some different files for UNIX, VMS, and NT.
#

switch $(OS)
{
case VMS :	code = vms ;
case OPENVMS :	code = vms ;
case NT :	code = nt ;
case * :	code = unix ;
}


#
# The guts of the Jamfile: how to build Jam
#

Main 		jam : jam.c ;
LinkLibraries 	jam : libjam.a ;

Library         libjam.a : 
		    command.c compile.c exec$(code).c expand.c
		    file$(code).c glob.c hash.c headers.c jamgram.y
		    lists.c make.c make1.c newstr.c option.c parse.c
		    regexp.c rules.c scan.c search.c timestamp.c
		    variable.c ;

#
# On UNIX, we install this stuff for easy use.
# On VMS, one must define a symbol:  jam :== $jam.exe -f jambase
# On NT, you're on your own.
#

if $(UNIX)
{
	InstallBin $(BINDIR) : jam ;
	InstallLib $(LIBDIR) : Jambase ;
	InstallMan $(MANDIR) : jam.1 Jambase.5 Jamfile.5 ;
}

#### --- cut

rule YYacc
{
	DEPENDS $(<) : $(>) ;
	LOCATE on $(<) = $(LOCATE_TARGET) ;
	Clean clean : $(<) ;
}

actions YYacc
{
	exit 1
	sh yyacc $(>) $(<)
}

YYacc jamgram.y jamgramtab.h : jamgram.yy ;

rule TempCopy
{
	DEPENDS $(<) : $(>) ;
}

actions TempCopy
{
	cp $(>) $(<)
}

rule Groff
{
	DEPENDS $(<) : $(>) ;
}

actions Groff
{
	groff -Tps -man $(>) > $(<)
}

ALLSOURCE = 
	    README RELNOTES Build.com Jambase Jamfile Jambase.5 Jambase.ps
	    Jamfile.5 Jamfile.ps Makefile Paper.ps Porting command.c command.h
	    compile.c compile.h execcmd.h execnt.c execunix.c execvms.c
	    expand.c expand.h filent.c filesys.h fileunix.c filevms.c
	    glob.c hash.c hash.h headers.c headers.h jam.1 jam.c jam.h
	    jam.ps jamgram.c jamgram.h jamgram.y jamgramtab.h lists.c
	    lists.h make.c make.h make1.c newstr.c newstr.h option.c
	    option.h parse.c parse.h patchlevel.h regexp.c regexp.h
	    rules.c rules.h scan.c scan.h search.c search.h timestamp.c
	    timestamp.h variable.c variable.h ;

TempCopy Paper.ps : ../doc/jam.ps ;
Groff jam.ps : jam.1 ;
Groff Jamfile.ps : Jamfile.5 ;
Groff Jambase.ps : Jambase.5 ;

rule Ball
{
	DEPENDS $(<) : $(>) ;

	PreBall $(<) ;

	switch $(<) 
	{
	case TAR : Tar $(<) : $(>) ;
	case SHAR : Shar $(<) : $(>) ;
	case ZIP : Zip $(<) : $(>) ;
	}

	PostBall $(<) ;

	RmTemps $(<) : Paper.ps ;
}

actions PreBall 
{
	mv Jamfile Jamfile.sav
	sed '/--- cut/,$d' Jamfile.sav > Jamfile
}

actions PostBall 
{
	mv Jamfile.sav Jamfile
}

	
actions Tar
{
	tar cvf $(<) $(>)
}

actions Shar
{
	shar -l97 -o $(<) $(>) 
}

actions Zip
{
	zip $(<) $(>) 
}

Ball SHAR : $(ALLSOURCE) ;
Ball TAR : $(ALLSOURCE) ;
Ball ZIP : $(ALLSOURCE) ;

